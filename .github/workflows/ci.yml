name: CI

on:
  push:
    branches-ignore: [ staging.tmp ]
  pull_request:
    branches-ignore: [ staging.tmp ]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          Android Stable,
          iOS Stable,
          MacOS Stable,
          MacOS Nightly,
          Ubuntu Stable,
          Ubuntu Nightly,
          Windows Stable,
          Windows Nightly,
        ]
        include:
          - os: macos-10.15
            name: Android Stable
            channel: stable
            build_command: rustup target add aarch64-linux-android; cargo clippy --target aarch64-linux-android
            install_deps_command: |
                                  curl -LO https://dl.google.com/android/repository/android-ndk-r20-linux-x86_64.zip
                                  unzip android-ndk-r20-linux-x86_64.zip -d $GITHUB_WORKSPACE
                                  export NDK_HOME="$GITHUB_WORKSPACE/android-ndk-r20"
                                  export CC="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/clang"
                                  export AR="$NDK_HOME/toolchains/llvm/prebuilt/linux-x86_64/bin/llvm-ar"
            make_command: make package
          - os: macos-10.15
            name: iOS Stable
            channel: stable
            build_command: rustup target add aarch64-apple-ios; cargo clippy --target aarch64-apple-ios
            make_command: make package
          - os: macos-10.15
            name: MacOS Stable
            channel: stable
            build_command: cargo clippy
            make_command: make package
          - os: macos-10.15
            name: MacOS Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: brew install cmake glfw3
            make_command: make VERBOSE=1
          - os: ubuntu-18.04
            name: Ubuntu Stable
            channel: stable
            build_command: cargo clippy
            make_command: make package
          - os: ubuntu-18.04
            name: Ubuntu Nightly
            channel: nightly
            build_command: cargo check
            install_deps_command: |
                                  sudo apt install -f -y cmake
                                  GLFW_DIR="$GITHUB_WORKSPACE/libglfw3"
                                  mkdir $GLFW_DIR
                                  curl -o $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3-dev_3.3.2-1_amd64.deb
                                  curl -o $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb http://security.ubuntu.com/ubuntu/pool/universe/g/glfw3/libglfw3_3.3.2-1_amd64.deb
                                  sudo apt install -f -y $GLFW_DIR/libglfw3_3.3.2-1_amd64.deb
                                  sudo apt install -f -y $GLFW_DIR/libglfw3-dev_3.3.2-1_amd64.deb
                                  rm -rf $GLFW_DIR
            make_command: make VERBOSE=1
          - os: windows-2019
            name: Windows Stable
            channel: stable
            build_command: rustup default stable-msvc; cargo check
            make_command: make package
          - os: windows-2019
            name: Windows Nightly
            channel: nightly
            build_command: rustup default nightly-msvc; cargo check
            make_command: make VERBOSE=1
    steps:
    - uses: actions/checkout@v2
    - if: matrix.channel == 'nightly'
      name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - if: contains(matrix.build_command, 'clippy')
      run: rustup component add clippy
    - name: Install dependencies
      run: ${{ matrix.install_deps_command }}
    - name: cargo test
      run: cargo test
    - if: contains(matrix.build_command, 'clippy')
      name: cargo clippy
      run: ${{ matrix.build_command }}
    - name: MacOS vulkan-portability
      if: contains(matrix.os, 'macos') && !contains(matrix.build_command, 'ios')
      run: ${{ matrix.build_command }} --features vulkan-portability
    - if: matrix.channel == 'nightly'
      run: cargo +nightly install cbindgen
    - run: ${{ matrix.make_command }}
