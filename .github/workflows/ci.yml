name: CI

on:
  push:
    branches-ignore: [ staging.tmp ]
  pull_request:
    branches-ignore: [ staging.tmp ]

jobs:
  build:
    name: ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        name: [
          Windows Nightly
        ]
        include:
          - os: windows-2019
            name: Windows Nightly
            channel: nightly
            build_command: rustup default nightly-msvc; cargo check
            install_deps_command: |
                                  # choco exit with code 1 after successful install ¯\_(ツ)_/¯ 
                                  choco install -y --force cmake make | exit 0
                                  
                                  curl -sL -o glfw.zip https://github.com/glfw/glfw/archive/3.3.zip
                                  unzip -qq glfw.zip -d $GITHUB_WORKSPACE
                                  cd $GITHUB_WORKSPACE/glfw-3.3/
                                  export GLFW3_INCLUDE_DIR=`pwd`/include
                                  export GLFW3_INSTALL_DIR=`pwd`/install
                                  cmake . -DCMAKE_INSTALL_PREFIX=$GLFW3_INSTALL_DIR -DCMAKE_GENERATOR_PLATFORM=x64
                                  cmake --build . --target install
            make_command: CMAKE_PREFIX_PATH=$GITHUB_WORKSPACE/glfw-3.3/install make VERBOSE=1
    steps:
    - uses: actions/checkout@v2
    - if: matrix.channel == 'nightly'
      name: Install latest nightly
      uses: actions-rs/toolchain@v1
      with:
        toolchain: nightly
        override: true
    - if: contains(matrix.build_command, 'clippy')
      run: rustup component add clippy
    - name: Install dependencies
      run: ${{ matrix.install_deps_command }}
      shell: bash
    - name: cargo test
      run: cargo test
    - if: contains(matrix.build_command, 'clippy')
      name: cargo clippy
      run: ${{ matrix.build_command }}
    - name: MacOS vulkan-portability
      if: contains(matrix.os, 'macos') && !contains(matrix.build_command, 'ios')
      run: ${{ matrix.build_command }} --features vulkan-portability
    - if: matrix.channel == 'nightly'
      run: cargo +nightly install cbindgen
    - run: ${{ matrix.make_command }}
      shell: bash
